---
description: 
globs: 
alwaysApply: false
---
# Supabase RLS Policies

This document contains a snapshot of the Row Level Security policies currently configured in the Supabase database. This was generated by querying `pg_policies`.

**Note:** This file might become outdated if policies are changed directly in the Supabase dashboard without updating this file. It's recommended to re-query and update this periodically or after making policy changes.

```json
[
  {
    "schemaname": "cron",
    "tablename": "job",
    "policyname": "cron_job_policy",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "ALL",
    "qual": "(username = CURRENT_USER)",
    "with_check": null
  },
  {
    "schemaname": "cron",
    "tablename": "job_run_details",
    "policyname": "cron_job_run_details_policy",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "ALL",
    "qual": "(username = CURRENT_USER)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "b2c_lead_info",
    "policyname": "Users can insert B2C lead info",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role, 'agent'::user_role])) OR (EXISTS ( SELECT 1\n           FROM users lead_user\n          WHERE ((lead_user.id = b2c_lead_info.user_id) AND (lead_user.referrer_id = auth.uid()) AND (lead_user.deleted_at IS NULL))))) AND (auth_user.deleted_at IS NULL))))"
  },
  {
    "schemaname": "public",
    "tablename": "b2c_lead_info",
    "policyname": "Users can insert their own B2C lead info",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = created_by)"
  },
  {
    "schemaname": "public",
    "tablename": "b2c_lead_info",
    "policyname": "Users can update B2C lead info",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role, 'agent'::user_role])) OR (EXISTS ( SELECT 1\n           FROM users lead_user\n          WHERE ((lead_user.id = b2c_lead_info.user_id) AND (lead_user.referrer_id = auth.uid()) AND (lead_user.deleted_at IS NULL))))) AND (auth_user.deleted_at IS NULL))))",
    "with_check": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role, 'agent'::user_role])) OR (EXISTS ( SELECT 1\n           FROM users lead_user\n          WHERE ((lead_user.id = b2c_lead_info.user_id) AND (lead_user.referrer_id = auth.uid()) AND (lead_user.deleted_at IS NULL))))) AND (auth_user.deleted_at IS NULL))))"
  },
  {
    "schemaname": "public",
    "tablename": "b2c_lead_info",
    "policyname": "Users can update their own B2C lead info",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = created_by)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "b2c_lead_info",
    "policyname": "Users can view their own B2C lead info",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role, 'agent'::user_role])) OR (auth.uid() = b2c_lead_info.user_id) OR (EXISTS ( SELECT 1\n           FROM users lead_user\n          WHERE ((lead_user.id = b2c_lead_info.user_id) AND (lead_user.referrer_id = auth.uid()) AND (lead_user.deleted_at IS NULL))))) AND (auth_user.deleted_at IS NULL))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "calls",
    "policyname": "Allow insert for participants",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.uid() = from_user_id) OR (auth.uid() = to_user_id))"
  },
  {
    "schemaname": "public",
    "tablename": "calls",
    "policyname": "Allow update for participants",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = from_user_id) OR (auth.uid() = to_user_id))",
    "with_check": "((auth.uid() = from_user_id) OR (auth.uid() = to_user_id))"
  },
  {
    "schemaname": "public",
    "tablename": "calls",
    "policyname": "Service role can manage calls",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "ALL",
    "qual": "((auth.jwt() ->> 'role'::text) = 'service_role'::text)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "calls",
    "policyname": "Users can view calls they participated in",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = to_user_id) OR (auth.uid() = from_user_id) OR (EXISTS ( SELECT 1\n   FROM user_groups\n  WHERE ((user_groups.id = calls.group_id) AND (user_groups.id IN ( SELECT group_memberships.group_id\n           FROM group_memberships\n          WHERE (group_memberships.user_id = auth.uid())))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "calls",
    "policyname": "Users can view their own calls",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = to_user_id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "communications",
    "policyname": "communications_insert",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.uid() = agent_id) OR (EXISTS ( SELECT 1\n   FROM users u\n  WHERE ((u.id = auth.uid()) AND (u.deleted_at IS NULL) AND (u.organization_id IS NOT NULL) AND ((u.role = 'admin'::user_role) OR (u.role = 'super_admin'::user_role))))) OR (EXISTS ( SELECT 1\n   FROM users u\n  WHERE ((u.id = auth.uid()) AND (u.deleted_at IS NULL) AND (u.organization_id = ( SELECT target_user.organization_id\n           FROM users target_user\n          WHERE ((target_user.id = communications.user_id) AND (target_user.deleted_at IS NULL)))) AND (u.organization_id IS NOT NULL)))))"
  },
  {
    "schemaname": "public",
    "tablename": "communications",
    "policyname": "communications_select",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM users u\n  WHERE ((u.id = auth.uid()) AND (u.deleted_at IS NULL) AND ((u.organization_id = ( SELECT target_user.organization_id\n           FROM users target_user\n          WHERE ((target_user.id = communications.user_id) AND (target_user.deleted_at IS NULL)))) OR (auth.uid() = communications.agent_id)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "communications",
    "policyname": "communications_update",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = agent_id)",
    "with_check": "(auth.uid() = agent_id)"
  },
  {
    "schemaname": "public",
    "tablename": "companies",
    "policyname": "companies_delete",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.deleted_at IS NULL) AND ((users.role = 'super_admin'::user_role) OR ((users.role = 'admin'::user_role) AND (users.organization_id = companies.organization_id))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "companies",
    "policyname": "companies_insert",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((organization_id IS NOT NULL) AND (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.deleted_at IS NULL) AND ((users.role = 'super_admin'::user_role) OR ((users.role = ANY (ARRAY['admin'::user_role, 'agent'::user_role])) AND (users.organization_id = users.organization_id)))))))"
  },
  {
    "schemaname": "public",
    "tablename": "companies",
    "policyname": "companies_select",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "((deleted_at IS NULL) AND (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.deleted_at IS NULL) AND ((users.role = 'super_admin'::user_role) OR ((users.role = ANY (ARRAY['admin'::user_role, 'agent'::user_role])) AND (users.organization_id = companies.organization_id) AND (users.organization_id IS NOT NULL)))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "companies",
    "policyname": "companies_soft_delete",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.deleted_at IS NULL) AND ((users.role = 'super_admin'::user_role) OR ((users.role = 'admin'::user_role) AND (users.organization_id = companies.organization_id))))))",
    "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.deleted_at IS NULL) AND ((users.role = 'super_admin'::user_role) OR ((users.role = ANY (ARRAY['admin'::user_role, 'agent'::user_role])) AND (users.organization_id = companies.organization_id))))))"
  },
  {
    "schemaname": "public",
    "tablename": "companies",
    "policyname": "companies_update",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.deleted_at IS NULL) AND ((users.role = 'super_admin'::user_role) OR ((users.role = ANY (ARRAY['admin'::user_role, 'agent'::user_role])) AND (users.organization_id = companies.organization_id))))))",
    "with_check": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.deleted_at IS NULL) AND ((users.role = 'super_admin'::user_role) OR ((users.role = 'admin'::user_role) AND (users.organization_id = companies.organization_id)))))) AND (((deleted_at IS NOT NULL) AND (deleted_at IS NULL)) OR (companies.* = companies.*)))"
  },
  {
    "schemaname": "public",
    "tablename": "email_integrations",
    "policyname": "Users can add own email integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "email_integrations",
    "policyname": "Users can delete own email integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role = 'admin'::user_role) OR (users.role = 'super_admin'::user_role)) AND (users.deleted_at IS NULL)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "email_integrations",
    "policyname": "Users can update own email integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role = 'admin'::user_role) OR (users.role = 'super_admin'::user_role)) AND (users.deleted_at IS NULL)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "email_integrations",
    "policyname": "Users can view own email integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role = 'admin'::user_role) OR (users.role = 'super_admin'::user_role)) AND (users.deleted_at IS NULL)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "follow_up_sequences",
    "policyname": "Enable read access for authenticated users",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "follow_ups",
    "policyname": "follow_ups_insert_v6",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND (auth_user.deleted_at IS NULL) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role])) OR ((auth_user.role = 'agent'::user_role) AND (EXISTS ( SELECT 1\n           FROM users target_user\n          WHERE ((target_user.id = follow_ups.user_id) AND (target_user.owner_id = auth_user.id)))))))))"
  },
  {
    "schemaname": "public",
    "tablename": "follow_ups",
    "policyname": "follow_ups_select_v6",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND (auth_user.deleted_at IS NULL) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role])) OR ((auth_user.role = 'agent'::user_role) AND (EXISTS ( SELECT 1\n           FROM users target_user\n          WHERE ((target_user.id = follow_ups.user_id) AND (target_user.owner_id = auth_user.id)))))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "follow_ups",
    "policyname": "follow_ups_update_v6",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND (auth_user.deleted_at IS NULL) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role])) OR ((auth_user.role = 'agent'::user_role) AND (EXISTS ( SELECT 1\n           FROM users target_user\n          WHERE ((target_user.id = follow_ups.user_id) AND (target_user.owner_id = auth_user.id)))))))))",
    "with_check": "(EXISTS ( SELECT 1\n   FROM users auth_user\n  WHERE ((auth_user.id = auth.uid()) AND (auth_user.deleted_at IS NULL) AND ((auth_user.role = ANY (ARRAY['admin'::user_role, 'super_admin'::user_role])) OR ((auth_user.role = 'agent'::user_role) AND (EXISTS ( SELECT 1\n           FROM users target_user\n          WHERE ((target_user.id = follow_ups.user_id) AND (target_user.owner_id = auth_user.id)))))))))"
  },
  {
    "schemaname": "public",
    "tablename": "group_memberships",
    "policyname": "Only super admins can manage memberships",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "ALL",
    "qual": "((auth.jwt() ->> 'role'::text) = 'super_admin'::text)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "group_memberships",
    "policyname": "Users can view all group memberships",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "integrations",
    "policyname": "Users can add own integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "integrations",
    "policyname": "Users can delete own integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role = 'admin'::user_role) OR (users.role = 'super_admin'::user_role)) AND (users.deleted_at IS NULL)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "integrations",
    "policyname": "Users can update own integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role = 'admin'::user_role) OR (users.role = 'super_admin'::user_role)) AND (users.deleted_at IS NULL)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "integrations",
    "policyname": "Users can view own integrations",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role = 'admin'::user_role) OR (users.role = 'super_admin'::user_role)) AND (users.deleted_at IS NULL)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "message_templates",
    "policyname": "Users can create templates in their organization",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND (r.organization_id = message_templates.organization_id))))"
  },
  {
    "schemaname": "public",
    "tablename": "message_templates",
    "policyname": "Users can delete their own templates",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "((auth.uid() = created_by) AND (deleted_at IS NULL))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "message_templates",
    "policyname": "Users can update their own templates",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = created_by) AND (deleted_at IS NULL))",
    "with_check": "((auth.uid() = created_by) AND (deleted_at IS NULL))"
  },
  {
    "schemaname": "public",
    "tablename": "message_templates",
    "policyname": "Users can view templates in their organization",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND (r.organization_id = message_templates.organization_id))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "organizations",
    "policyname": "organizations_access",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND ((r.role = 'super_admin'::user_role) OR (r.organization_id = organizations.id)))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "organizations",
    "policyname": "organizations_update",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND ((r.role = 'super_admin'::user_role) OR ((r.role = 'admin'::user_role) AND (r.organization_id = organizations.id))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "user_groups",
    "policyname": "Only super admins can create groups",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.jwt() ->> 'role'::text) = 'super_admin'::text)"
  },
  {
    "schemaname": "public",
    "tablename": "user_groups",
    "policyname": "Only super admins can update groups",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((auth.jwt() ->> 'role'::text) = 'super_admin'::text)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "user_groups",
    "policyname": "Users can view all groups",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "user_phone_status",
    "policyname": "Users can insert their own status",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "user_phone_status",
    "policyname": "Users can update their own status",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = user_id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "user_phone_status",
    "policyname": "Users can view their own status",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = user_id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Admins can delete users in their organization",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "(EXISTS ( SELECT 1\n   FROM get_user_context(auth.uid()) ctx(organization_id, role)\n  WHERE ((ctx.role = ANY (ARRAY['admin'::text, 'super_admin'::text])) AND ((ctx.role = 'super_admin'::text) OR ((ctx.role = 'admin'::text) AND (ctx.organization_id = ctx.organization_id))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Admins can update users in their organization",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM get_user_context(auth.uid()) ctx(organization_id, role)\n  WHERE ((ctx.role = ANY (ARRAY['admin'::text, 'super_admin'::text])) AND ((ctx.role = 'super_admin'::text) OR ((ctx.role = 'admin'::text) AND (ctx.organization_id = ctx.organization_id))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "System can create users through trigger",
    "permissive": "PERMISSIVE",
    "roles": "{anon}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "true"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Users can view their own record and records in their organizati",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "((id = auth.uid()) OR (organization_id = ( SELECT get_user_context.organization_id\n   FROM get_user_context(auth.uid()) get_user_context(organization_id, role))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "service_role_insert",
    "permissive": "PERMISSIVE",
    "roles": "{service_role}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "true"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "users_insert",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND (r.role = 'super_admin'::user_role)))) OR (EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND (r.role = 'admin'::user_role) AND (r.organization_id = users.organization_id) AND (r.organization_id IS NOT NULL)))) OR (EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND (r.role = 'agent'::user_role) AND (r.organization_id = users.organization_id) AND (r.organization_id IS NOT NULL) AND (users.role = ANY (ARRAY['lead'::user_role, 'customer'::user_role]))))))"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "users_org_access",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND ((r.role = 'super_admin'::user_role) OR ((r.organization_id = users.organization_id) AND (r.organization_id IS NOT NULL))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "users_self_access",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "ALL",
    "qual": "(id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "users_update",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "((id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM user_roles r\n  WHERE ((r.id = auth.uid()) AND (r.deleted_at IS NULL) AND ((r.role = 'super_admin'::user_role) OR ((r.role = 'admin'::user_role) AND (r.organization_id = users.organization_id) AND (r.organization_id IS NOT NULL)))))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "vob_covered_codes",
    "policyname": "Users can insert covered codes for their VOB records",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(EXISTS ( SELECT 1\n   FROM vob_records\n  WHERE ((vob_records.id = vob_covered_codes.vob_record_id) AND (vob_records.verified_by = auth.uid()))))"
  },
  {
    "schemaname": "public",
    "tablename": "vob_covered_codes",
    "policyname": "Users can view covered codes for their VOB records",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM vob_records\n  WHERE ((vob_records.id = vob_covered_codes.vob_record_id) AND (vob_records.verified_by = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "vob_records",
    "policyname": "Users can insert their own VOB records",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = verified_by)"
  },
  {
    "schemaname": "public",
    "tablename": "vob_records",
    "policyname": "Users can update their own VOB records",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = verified_by)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "vob_records",
    "policyname": "Users can view their own VOB records",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = verified_by)",
    "with_check": null
  }
]
